generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

enum RaffleStatus {
  DRAFT
  PUBLISHED
  ACTIVE
  FINISHED
  CANCELLED
  COMPLETED // ✅ Agregado para rifas completadas
}

enum NotificationType {
  PURCHASE_CONFIRMATION
  RAFFLE_WINNER
  RAFFLE_CREATED
  SYSTEM_ALERT
  WINNER_NOTIFICATION // ✅ Agregado para notificaciones de ganadores
}

enum TicketStatus {
  PENDING
  ACTIVE
  AVAILABLE // ✅ Agregado - tickets disponibles para usar
  IN_RAFFLE // ✅ Agregado - tickets participando en una rifa
  WINNER
  LOST
  DELETED // ✅ Agregado - tickets eliminados por admin
}

model User {
  id       String  @id @default(cuid())
  name     String?
  email    String  @unique
  password String? // opcional para OAuth
  image    String?
  role     Role    @default(USER)
  isActive Boolean @default(true) @map("is_active")

  // Relaciones
  tickets       Ticket[]
  purchases     Purchase[]
  raffles       Raffle[]       @relation("RaffleOwner")
  notifications Notification[]
  auditLogs     AuditLog[]
  wonRaffles    Raffle[]       @relation("RaffleWinner") // Rifas ganadas

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("users")
}

model Raffle {
  id          String  @id @default(cuid())
  title       String
  description String
  ticketPrice Int     @map("ticket_price") // << Cambiar Float -> Int
  maxTickets  Int?    @map("max_tickets")
  imageUrl    String? @map("image_url")

  // Premio
  prizeTitle       String? @map("prize_title")
  prizeDescription String? @map("prize_description")
  prizeValue       Int?    @map("prize_value") // << Cambiar Float? -> Int?
  prizeImage       String? @map("prize_image")
  prizeCategory    String? @map("prize_category")

  // (Opcional, recomendado) hasta 3 imágenes procesadas
  images String[] @default([]) // << NUEVO

  // Propietario
  ownerId    String  @map("owner_id")
  owner      User    @relation("RaffleOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerImage String? @map("owner_image")

  // Ganador
  winnerId      String? @map("winner_id")
  winner        User?   @relation("RaffleWinner", fields: [winnerId], references: [id], onDelete: SetNull)
  winningTicket String? @map("winning_ticket")

  status          RaffleStatus @default(DRAFT)
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @default(now()) @updatedAt @map("updated_at")
  publishedAt     DateTime?    @map("published_at")
  startsAt        DateTime?    @map("starts_at")
  endsAt          DateTime?    @map("ends_at")
  drawnAt         DateTime?    @map("drawn_at")
  maxParticipants Int?         @map("max_participants")

  tickets        Ticket[]
  participations Participation[]

  @@index([ownerId])
  @@index([winnerId])
  @@index([status])
  @@map("raffles")
}

model Purchase {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  amount        Int // << Cambiar Float -> Int (enteros)
  currency      String  @default("ARS")
  paymentMethod String? @map("payment_method")
  paymentId     String? @map("payment_id")

  status String @default("pending")

  tickets   Ticket[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("purchases")
}

model Ticket {
  id   String  @id @default(cuid())
  uuid String  @unique @default(cuid())
  code String  @unique
  hash String? // seguir usando este campo pero ahora guardá el HMAC aquí

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  raffle   Raffle? @relation(fields: [raffleId], references: [id], onDelete: Cascade)
  raffleId String? @map("raffle_id")

  purchase   Purchase? @relation(fields: [purchaseId], references: [id])
  purchaseId String?   @map("purchase_id")

  participation Participation? @relation("TicketParticipation")

  status      TicketStatus @default(PENDING)
  metodoPago  String?      @map("metodo_pago")
  displayCode String?      @map("display_code")
  generatedAt DateTime?    @map("generated_at") // Usar este valor como timestamp del HMAC

  isUsed   Boolean @default(false) @map("is_used")
  isWinner Boolean @default(false) @map("is_winner")

  createdAt DateTime @default(now()) @map("created_at")

  @@index([raffleId])
  @@index([userId])
  @@index([status])
  @@index([uuid])
  @@map("tickets")
}

model Participation {
  id String @id @default(cuid())

  raffle   Raffle @relation(fields: [raffleId], references: [id], onDelete: Cascade)
  raffleId String @map("raffle_id")

  ticket   Ticket @relation("TicketParticipation", fields: [ticketId], references: [id])
  ticketId String @unique @map("ticket_id")

  isActive  Boolean  @default(true) @map("is_active")
  isWinner  Boolean  @default(false) @map("is_winner")
  createdAt DateTime @default(now()) @map("created_at")

  @@index([raffleId])
  @@map("participations")
}

model Notification {
  id     String @id @default(cuid())
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  type    NotificationType @default(SYSTEM_ALERT)
  title   String
  message String

  read   Boolean   @default(false)
  readAt DateTime? @map("read_at")

  // Datos relacionados opcionales
  raffleId String? @map("raffle_id")
  ticketId String? @map("ticket_id")

  createdAt DateTime  @default(now()) @map("created_at")
  expiresAt DateTime? @map("expires_at")

  @@index([userId, read])
  @@map("notifications")
}

model AuditLog {
  id     String @id @default(cuid())
  action String

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  targetType String? @map("target_type")
  targetId   String? @map("target_id")

  oldValues Json? @map("old_values")
  newValues Json? @map("new_values")

  ipAddress String? @map("ip_address")
  userAgent String? @map("user_agent")

  createdAt DateTime @default(now()) @map("created_at")

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}

// NUEVO: tabla de settings
model Setting {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String
  updatedAt DateTime @updatedAt
}

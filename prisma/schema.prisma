generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/**
 * =========================
 * Enums
 * =========================
 */
enum Role {
  USER
  ADMIN
  SUPERADMIN
}

enum RaffleStatus {
  DRAFT
  PUBLISHED
  ACTIVE
  READY_TO_DRAW // usado por /api/raffles/[id]/draw
  FINISHED
  CANCELLED
  COMPLETED
}

enum NotificationType {
  PURCHASE_CONFIRMATION
  RAFFLE_WINNER
  RAFFLE_CREATED
  SYSTEM_ALERT
  WINNER_NOTIFICATION
}

enum TicketStatus {
  PENDING
  ACTIVE
  AVAILABLE
  IN_RAFFLE
  WINNER
  LOST
  DELETED
}

/**
 * Visibilidad p√∫blica (listado) ‚Äî moderaci√≥n m√≠nima
 * Reutilizamos isPrivate y agregamos solo el estado de publicaci√≥n.
 */
enum ListingStatus {
  PENDING
  APPROVED
  REJECTED
}

/**
 * =========================
 * Models
 * =========================
 */
model User {
  id         String  @id @default(cuid())
  name       String?
  email      String  @unique
  password   String?
  image      String?
  role       Role    @default(USER)
  isActive   Boolean @default(true) @map("is_active")
  // ‚úÖ Verificaci√≥n de usuario
  isVerified Boolean @default(false) @map("is_verified")
  // ‚≠ê Control de primer login
  firstLogin Boolean @default(true) @map("first_login")

  // ‚úÖ Campos de perfil
  whatsapp       String? // N√∫mero de WhatsApp
  lastNameChange DateTime? @map("last_name_change") // Fecha del √∫ltimo cambio de nombre

  // Relaciones
  tickets       Ticket[]
  purchases     Purchase[]
  raffles       Raffle[]       @relation("RaffleOwner")
  notifications Notification[]
  auditLogs     AuditLog[]
  wonRaffles    Raffle[]       @relation("RaffleWinner")
  favorites     Favorite[]

  // üëá NUEVO: lado inverso de la relaci√≥n vendedor‚Üíproductos
  products Product[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("users")
}

model Raffle {
  id          String @id @default(cuid())
  title       String
  description String

  imageUrl String? @map("image_url")

  // Premio
  prizeTitle       String? @map("prize_title")
  prizeDescription String? @map("prize_description")
  prizeValue       Int     @map("prize_value")
  prizeImage       String? @map("prize_image")
  prizeCategory    String? @map("prize_category")

  // (Opcional) video de presentaci√≥n
  youtubeUrl String? @map("youtube_url")

  // (Opcional) hasta 3 im√°genes procesadas
  images String[] @default([])

  // Propietario
  ownerId    String  @map("owner_id")
  owner      User    @relation("RaffleOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerImage String? @map("owner_image")

  // Ganador (usuario)
  winnerId      String? @map("winner_id")
  winner        User?   @relation("RaffleWinner", fields: [winnerId], references: [id], onDelete: SetNull)
  winningTicket String? @map("winning_ticket")

  // Estado y fechas
  status      RaffleStatus @default(DRAFT)
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @default(now()) @updatedAt @map("updated_at")
  publishedAt DateTime?    @map("published_at")
  startsAt    DateTime?    @map("starts_at")
  endsAt      DateTime?    @map("ends_at")
  drawnAt     DateTime?    @map("drawn_at")

  // ‚úÖ Campos m√≠nimos para sorteo seguro (commit‚Äîreveal + schedule)
  drawAt         DateTime? @map("draw_at")
  drawSeedHash   String?   @map("draw_seed_hash")
  drawSeedReveal String?   @map("draw_seed_reveal")

  // ‚úÖ Participaci√≥n ganadora (uno-a-uno)
  winnerParticipationId String?        @unique @map("winner_participation_id")
  winnerParticipation   Participation? @relation(name: "WinnerParticipation", fields: [winnerParticipationId], references: [id], onDelete: SetNull)

  // Participaci√≥n
  maxParticipants Int     @map("max_participants")
  isPrivate       Boolean @default(false) @map("is_private") // true = UNLISTED, false = LISTED

  // ‚úÖ Moderaci√≥n de visibilidad p√∫blica (m√≠nimos agregados)
  listingStatus     ListingStatus @default(APPROVED) @map("listing_status")
  listingReviewedBy String?       @map("listing_reviewed_by")
  listingReviewedAt DateTime?     @map("listing_reviewed_at")
  listingReason     String?       @map("listing_reason")

  // ‚úÖ M√≠nimo por participaci√≥n + obligatoriedad
  minTicketsPerParticipant Int?    @map("min_tickets_per_participant")
  minTicketsIsMandatory    Boolean @default(false) @map("min_tickets_is_mandatory")

  // ‚úÖ Env√≠o
  freeShipping Boolean @default(false) @map("free_shipping")

  // ‚úÖ Moderaci√≥n/bloqueo de edici√≥n (solo SUPERADMIN puede modificar si true)
  isLocked Boolean @default(false) @map("is_locked")

  tickets        Ticket[]
  participations Participation[]
  // ‚úÖ Favoritos
  favorites      Favorite[]

  @@index([ownerId])
  @@index([winnerId])
  @@index([status])
  @@index([isPrivate])
  @@index([listingStatus])
  @@index([winnerParticipationId])
  @@index([isLocked])
  @@map("raffles")
}

model Purchase {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  amount        Int
  currency      String  @default("ARS")
  paymentMethod String? @map("payment_method")
  paymentId     String? @map("payment_id")

  status String @default("pending")

  tickets  Ticket[]
  // === NUEVO PARA PRODUCTOS DIGITALES ===
  items    PurchaseItem[]
  delivery DeliveryDigital?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("purchases")
}

model Ticket {
  id String @id @default(cuid())

  // Identidad y visualizaci√≥n
  uuid String @unique @default(cuid())
  code String @unique

  // Firma/HMAC (hex) ‚Äî obligatorio
  hash String

  // Propietario
  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  // Rifa / compra / participaci√≥n
  raffle   Raffle? @relation(fields: [raffleId], references: [id], onDelete: Cascade)
  raffleId String? @map("raffle_id")

  purchase   Purchase? @relation(fields: [purchaseId], references: [id])
  purchaseId String?   @map("purchase_id")

  participation Participation? @relation("TicketParticipation")

  // Estado
  status     TicketStatus @default(PENDING)
  metodoPago String?      @map("metodo_pago")

  // Emisi√≥n (timestamp usado para HMAC)
  generatedAt DateTime @default(now()) @map("generated_at")

  // Flags
  isUsed   Boolean @default(false) @map("is_used")
  isWinner Boolean @default(false) @map("is_winner")

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")

  // √çndices
  @@index([raffleId])
  @@index([userId])
  @@index([status])
  @@index([uuid])
  @@map("tickets")
}

model Participation {
  id String @id @default(cuid())

  raffle   Raffle @relation(fields: [raffleId], references: [id], onDelete: Cascade)
  raffleId String @map("raffle_id")

  ticket   Ticket @relation("TicketParticipation", fields: [ticketId], references: [id])
  ticketId String @unique @map("ticket_id")

  isActive  Boolean  @default(true) @map("is_active")
  isWinner  Boolean  @default(false) @map("is_winner")
  createdAt DateTime @default(now()) @map("created_at")

  // ‚úÖ Opcional: ranking 1..N (1 = ganador)
  drawOrder Int? @map("draw_order")

  // ‚úÖ Lado inverso requerido de la relaci√≥n uno-a-uno con Raffle
  wonRaffle Raffle? @relation(name: "WinnerParticipation")

  @@index([raffleId])
  @@map("participations")
}

model Notification {
  id     String @id @default(cuid())
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Tipo macro existente (se mantiene tal cual)
  type NotificationType @default(SYSTEM_ALERT)

  // üîπ NUEVO: intenci√≥n fina opcional para no pelearte con enums (ej: "TICKET_GIFT_RECEIVED", "YOU_WON", "PAYMENT_APPROVED")
  subtype String? @map("subtype")

  title   String
  message String

  // üîπ NUEVO: URL de acci√≥n definida por backend (el Header la prioriza)
  actionUrl String? @map("action_url")

  // üîπ NUEVO: si cuenta en badge/‚Äú(n)‚Äù del t√≠tulo (bienvenida = false; ganador/compra = true)
  isActionable Boolean @default(true) @map("is_actionable")

  // üîπ NUEVO: payload flexible para IDs relacionados (raffleId, ticketId, orderId, etc.)
  targets Json? @map("targets")

  // üîπ NUEVO: metadatos (quantity, amountCents, reasonCode, etc.)
  meta Json? @map("meta")

  read   Boolean   @default(false)
  readAt DateTime? @map("read_at")

  // Datos relacionados opcionales (se mantienen)
  raffleId String? @map("raffle_id")
  ticketId String? @map("ticket_id")

  createdAt DateTime  @default(now()) @map("created_at")
  expiresAt DateTime? @map("expires_at")

  @@index([userId, read])
  @@map("notifications")
}

model AuditLog {
  id     String @id @default(cuid())
  action String

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  targetType String? @map("target_type")
  targetId   String? @map("target_id")

  oldValues Json? @map("old_values")
  newValues Json? @map("new_values")

  ipAddress String? @map("ip_address")
  userAgent String? @map("user_agent")

  createdAt DateTime @default(now()) @map("created_at")

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}

model Setting {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String
  updatedAt DateTime @updatedAt
}

/**
 * =========================
 * Favoritos (tabla pivote)
 * =========================
 */
model Favorite {
  id String @id @default(cuid())

  // Relaciones
  userId   String @map("user_id")
  raffleId String @map("raffle_id")
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  raffle   Raffle @relation(fields: [raffleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([userId, raffleId], name: "favorite_user_raffle_unique")
  @@index([userId])
  @@index([raffleId])
  @@map("favorites")
}

// ==============================
// === PRODUCTOS DIGITALES ===
// ==============================

model Product {
  id          String  @id @default(cuid())
  type        String // 'PHOTO' | 'FILE' | 'COURSE' | 'TICKET'
  title       String
  description String?
  priceCents  Int
  currency    String  @default("ARS")

  // Almacenamiento privado en Supabase (bucket privado)
  filePath      String?
  bonusFilePath String?
  isActive      Boolean @default(true)

  // üëá Relaci√≥n opcional a User (vendedor)
  sellerId String? @map("seller_id")
  seller   User?   @relation(fields: [sellerId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  items PurchaseItem[]

  @@index([sellerId])
  @@index([isActive, createdAt])
  @@map("products")
}

model PurchaseItem {
  id         String   @id @default(cuid())
  purchase   Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  purchaseId String   @map("purchase_id")
  product    Product  @relation(fields: [productId], references: [id], onDelete: Restrict)
  productId  String   @map("product_id")
  quantity   Int      @default(1)
  unitPrice  Int
  currency   String   @default("ARS")

  createdAt DateTime @default(now()) @map("created_at")

  @@index([purchaseId])
  @@index([productId])
  @@map("purchase_items")
}

model DeliveryDigital {
  id         String   @id @default(cuid())
  purchase   Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  purchaseId String   @unique @map("purchase_id")

  // Enlaces firmados (nunca publiques links directos)
  mainSignedUrl  String? @map("main_signed_url")
  bonusSignedUrl String? @map("bonus_signed_url")

  // Control de re-generaci√≥n / l√≠mite de descargas (opcional)
  downloads    Int @default(0)
  maxDownloads Int @default(5)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("deliveries_digital")
}
